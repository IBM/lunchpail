package status

import (
	"fmt"
	"strings"
	"time"

	"github.com/charmbracelet/lipgloss"
	"lunchpail.io/pkg/lunchpail"
	"lunchpail.io/pkg/views"
)

// Format `message` generated by some component `who`
func message(who, message string, style lipgloss.Style) string {
	return fmt.Sprintf("%s %s", style.Render(fmt.Sprintf("%8s", who)), views.Dim.Render(message))
}

func cpuline(model Model) string {
	line := []string{}

	prevPrefix := ""
	for _, worker := range model.Cpu.Sorted() {
		prefix := ""
		paddingLeft := 1
		switch worker.Component {
		case lunchpail.DispatcherComponent:
			prefix = "D "
		case lunchpail.WorkersComponent:
			prefix = "W "
		}

		if prefix == prevPrefix {
			prefix = ""
			paddingLeft = 0
		} else {
			prevPrefix = prefix
		}

		cpuinfo := views.ComponentStyle(worker.Component).PaddingLeft(paddingLeft).Render(fmt.Sprintf("%s%.2f%%", prefix, worker.CpuUtil))
		line = append(line, cpuinfo)
	}

	return message("CPU", strings.Join(line, ""), views.OtherComponentStyle)
}

func footer(model Model, timestamp time.Time, maxheight int) []string {
	maxheight-- // minus one for this timestamp
	footer := []string{views.Dim.Render(timestamp.Format(time.RFC850))}

	if model.Cpu.HasData() {
		maxheight-- // minus one for the cpu line
		footer = append(footer, cpuline(model))
	}

	// then use the rest of maxheight for messages
	for _, msg := range model.messages(maxheight) {
		footer = append(footer, message(msg.who, msg.message, views.DispatcherComponentStyle))
	}

	return footer
}
