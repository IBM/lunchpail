package status

import (
	"fmt"
	"strings"
	"time"

	"github.com/charmbracelet/lipgloss"
	"github.com/dustin/go-humanize"
	"lunchpail.io/pkg/observe"
	"lunchpail.io/pkg/observe/colors"
	"lunchpail.io/pkg/observe/cpu"
)

// Format `message` generated by some component `who`
func message(who, message string, prefixStyle lipgloss.Style, msgStyle lipgloss.Style) string {
	return fmt.Sprintf("%s %s", prefixStyle.Render(fmt.Sprintf("%8s", who)), msgStyle.Render(message))
}

type Resource string

const (
	Cpu Resource = "CPU"
	Mem          = "Memory"
)

func cpuline(workers []cpu.Worker, resource Resource) string {
	line := []string{}

	prevPrefix := ""
	for _, worker := range workers {
		prefix := ""
		switch worker.Component {
		case observe.DispatcherComponent:
			prefix = "D "
		case observe.WorkersComponent:
			prefix = "W "
		}

		if prefix == prevPrefix {
			prefix = ""
		} else {
			prevPrefix = prefix
		}

		// compute the length of both cpu and mem, so we can align them across rows
		cpuVal := fmt.Sprintf("%s%s%%", prefix, humanize.FtoaWithDigits(worker.CpuUtil, 1))
		memVal := fmt.Sprintf("%s%s", prefix, humanize.Bytes(worker.MemoryBytes))
		maxlen := max(len(cpuVal), len(memVal))

		var val string
		switch resource {
		case Cpu:
			val = fmt.Sprintf("%-*s", maxlen, cpuVal)
		case Mem:
			val = fmt.Sprintf("%-*s", maxlen, memVal)
		}

		if val != "" {
			info := colors.ComponentStyle(worker.Component).Render(val)
			line = append(line, info)
		}
	}

	return message(string(resource), strings.Join(line, ""), colors.OtherComponentStyle, colors.Dim)
}

func footer(model Model, timestamp time.Time, maxheight int) []string {
	maxheight-- // minus one for this timestamp
	footer := []string{colors.Dim.Render(timestamp.Format(time.RFC850))}

	if model.Cpu.HasData() {
		maxheight -= 2 // minus one for the cpu and memory line
		workers := model.Cpu.Sorted()
		footer = append(footer, cpuline(workers, Cpu))
		footer = append(footer, cpuline(workers, Mem))
	}

	// then use the rest of maxheight for messages
	for _, msg := range model.messages(maxheight) {
		msgStyle := colors.Dim
		prefixStyle := colors.ClusterComponentStyle

		switch msg.who {
		case "Dispatch":
			msgStyle = colors.DispatcherMessageStyle
			prefixStyle = colors.DispatcherComponentStyle
		case "Workers":
			msgStyle = colors.WorkersMessageStyle
			prefixStyle = colors.WorkersComponentStyle
		case "Runtime":
			msgStyle = colors.WorkStealerMessageStyle
			prefixStyle = colors.WorkStealerComponentStyle
		case "Error":
			prefixStyle = colors.ErrorComponentStyle
		}
		footer = append(footer, message(msg.who, msg.message, prefixStyle, msgStyle))
	}

	return footer
}
